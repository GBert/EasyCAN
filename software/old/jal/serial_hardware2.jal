-- Title: USART2 hardware control
-- Author: Stef Mientki, Copyright (c) 2002..2006, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling.
-- Compiler: 2.4o
-- Revision: $Revision: 3004 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: USART2 hardware control.
-- Routines for sending and receiving through the second [E]USART2
--
-- Notes: - See also the notes in serial_hardware library.
--        - When the physical locations of pin_TX and pin_RX are configurable for
--          a specific PIC, the device file will probably contain names like
--          pin_TX2_RC2 and pin_RX2_RC1 and another pair with other pin suffixes.
--          Depending for which pair of pins the USART is configured aliases
--          without suffixes have to be specified, like:
--              alias  pin_TX2            is  pin_TX2_RC2
--              alias  pin_RX2            is  pin_RX2_RC1
--              alias  pin_TX2_direction  is  pin_TX2_RC2_direction
--              alias  pin_RX2_direction  is  pin_RX2_RC1_direction
--

include usart2_common

-- -----------------------------------------------------------------------
-- Title:     Initialize second serial port
-- Arguments: (none)
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw2_init() is

   TXSTA2 = 0b0000_0000                            -- reset (8 bit, async)
   RCSTA2 = 0b0000_0000                            -- reset (8 bit, async)

   _calculate_and_set_baudrate2()                  -- transmit and receive speed

   if (defined(PIE3_RC2IE) == TRUE) then
      PIE3_RC2IE = FALSE                           -- disable receive interrupts
      PIE3_TX2IE = FALSE                           -- disable transmit interrupts
   elsif (defined(PIE4_RC2IE) == TRUE) then
      PIE4_RC2IE = FALSE                           -- disable receive interrupts
      PIE4_TX2IE = FALSE                           -- disable transmit interrupts
   else
      _error "Unable to disable interrupts (bits not supported, please report)"
   end if

   pin_RX2_direction = INPUT                       -- make receive pin input
   pin_TX2_direction = INPUT                       -- make transmit pin input!

   TXSTA2_TXEN = TRUE                              -- Enable transmitter
                                                   -- (makes transmit pin output)

   RCSTA2_SPEN = enabled                           -- activate serial port
   RCSTA2_CREN = enabled                           -- continuous receive

end procedure



-- -----------------------------------------------------------------------
-- Title:     Disable USART2
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Allows pins to be used (temporary) for other purposes.
--            USART can be enabled again by calling serial_hw2_enable()
-- -----------------------------------------------------------------------
procedure serial_hw2_disable() is
   while !TXSTA_TRMT loop end loop                 -- wait while transmission pending
   RCSTA2_SPEN = FALSE                             -- disable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Enable USART2
-- Arguments: (none)
-- Returns:   (nothing)
-- Title:     Re-enable USART after use of serial_hw2_disable()
-- -----------------------------------------------------------------------
procedure serial_hw2_enable() is
   RCSTA2_SPEN = TRUE                              -- enable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit character
-- Arguments: Data (byte) to transmit
-- Returns:   (nothing)
-- Notes:     Hardware transmit buffer must be empty, wait if necessary
-- -----------------------------------------------------------------------
procedure serial_hw2_write(byte in data) is
   if (defined(PIR3_TX2IF) == TRUE) then
      while !PIR3_TX2IF loop end loop              -- wait while transmission pending
   elsif (defined(PIR4_TX2IF) == TRUE) then
      while !PIR4_TX2IF loop end loop              -- wait while transmission pending
   end if
   TXREG2 = data                                   -- transfer data
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit word
-- Arguments: Data (word) to transmit
-- Returns:   (nothing)
-- Notes:     Send word as 2 bytes, Most Significant Byte first.
--            See also serial_hw_write()
-- -----------------------------------------------------------------------
procedure serial_hw2_write_word(word in data) is
   var byte dx[2] at data                          -- overlay
   serial_hw2_write(dx[1])
   asm nop                  -- necessary for good optimized compiler, loading
                            -- of TXREG2 doesn't immediately set TX2IF
   serial_hw2_write(dx[0])
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- Notes:     Using this inline function for serial_hw_data'get saves a stack level
--            With overrun error the USART is reset (error(?)byte is returned!)
-- -----------------------------------------------------------------------
function _serial_hw2_read(byte out data) return bit is
   pragma inline

   if (defined(PIR3_RC2IF) == TRUE) then
      if PIR3_RC2IF then                           -- check if data available
         data = RCREG2                             -- pass received byte to caller
         PIR3_RC2IF  = FALSE                       -- eur@fiwhex.nl 12-sept-08
      else
         return FALSE                              -- no data available
      end if
   elsif (defined(PIR4_RC2IF) == TRUE) then
      if PIR4_RC2IF then                           -- check if data available
         data = RCREG2                             -- pass received byte to caller
         PIR4_RC2IF  = FALSE                       -- eur@fiwhex.nl 12-sept-08
      else
         return FALSE                              -- no data available
      end if
   end if

   if RCSTA2_OERR then                             -- reset USART after overrun
      RCSTA2_CREN = FALSE
      RCSTA2_CREN = TRUE
   end if

   return TRUE
end function


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- -----------------------------------------------------------------------
function serial_hw2_read(byte out data) return bit is
   return _serial_hw2_read(data)
end function


-- -----------------------------------------------------------------------
-- Title:     Transmit byte
-- Arguments: Data (byte) to be transmitted
-- Returns:   (nothing)
-- Notes:     This pseudo variable allows a language construct like
--              serial_hw2_data = <byte>
--            to transmit a byte to the seial port
-- -----------------------------------------------------------------------
procedure serial_hw2_data'put(byte in data) is
   serial_hw2_write(data)
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   Data (byte) received
-- Notes:     This pseudo variable allows a language construct like
--              databyte = serial_hw2_data
--            to receive a byte from the serial port into variable 'databyte'
-- -----------------------------------------------------------------------
function serial_hw2_data'get() return byte is
   var byte data
   while !_serial_hw2_read(data) loop  end loop
   return data
end function


-- -----------------------------------------------------------------------
-- raw interface
-- -----------------------------------------------------------------------

-- generic (pic-independent) variable to check if a byte is received
if (defined(PIR3_RC2IF) == TRUE) then
   alias serial_hw2_data_available is PIR3_RC2IF
elsif (defined(PIR4_RC2IF) == TRUE) then
   alias serial_hw2_data_available is PIR4_RC2IF
end if

-- generic (pic-independent) variable to check if transmit buffer is empty
if (defined(PIR3_TX2IF) == TRUE) then
  alias serial_hw2_data_ready is PIR3_TX2IF
elsif (defined(PIR4_TX2IF) == TRUE) then
  alias serial_hw2_data_ready is PIR4_TX2IF
end if

-- These are real raw procedures, declared as pseudo variables
-- the user is totally responsible for testing the transmit/receive
-- flag before using these functions
procedure serial_hw2_data_raw'put(byte in data) is
   TXREG2 = data
end procedure

function serial_hw2_data_raw'get() return byte is
   return RCREG2
end function

