-- Title: Delays procedures at any processor frequency
-- Author: Stef Mientki, Copyright (c) 2002..2006, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling, Joep Suijs
-- Compiler: >=2.4g
-- Revision: $Revision: 2760 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: library for delays at any processor frequency.
-- It's based on the JAL v2 compiler generator _usec_delay.
--
-- Fixed delays for the short intervals:
--   delay_1us(), delay_2us(), delay_3us(), delay_4us(), delay_5us(),
--   delay_6us(), delay_7us(), delay_8us(), delay_9us()
-- These procedures are 'inline' and are as accurate as the ocillator source.
--
-- For the longer delays, procedure with parameter N  ( 1.. 255)
--   delay_10us(n)
--   delay_1ms(n)
--   delay_100ms(n)
-- These procedures are due to call/return overhead slightly clock
--  frequency dependent.

-- fixed delay of 1 usec (no arguments)
procedure delay_1us() is
  pragma inline
  _usec_delay(1)
end procedure

-- fixed delay of 2 usec (no arguments)
procedure delay_2us() is
  pragma inline
  _usec_delay(2)
end procedure

-- fixed delay of 3 usec (no arguments)
procedure delay_3us() is
  pragma inline
  _usec_delay(3)
end procedure

-- fixed delay of 4 usec (no arguments)
procedure delay_4us() is
  pragma inline
  _usec_delay(4)
end procedure

-- fixed delay of 5 usec (no arguments)
procedure delay_5us() is
  pragma inline
  _usec_delay(5)
end procedure

-- fixed delay of 6 usec (no arguments)
procedure delay_6us() is
  pragma inline
  _usec_delay(6)
end procedure

-- fixed delay of 7 usec (no arguments)
procedure delay_7us() is
  pragma inline
  _usec_delay(7)
end procedure

-- fixed delay of 8 usec (no arguments)
procedure delay_8us() is
  pragma inline
  _usec_delay(8)
end procedure

-- fixed delay of 9 usec (no arguments)
procedure delay_9us() is
  pragma inline
  _usec_delay(9)
end procedure
                
-- calculate instruction execution time in 10ns units
const instruction_time = 400_000_000 / target_clock
                
-- Delays for n * 10 usec
procedure delay_10us(byte in n) is
   if n==0 then
      return
   elsif n==1 then
     const _ten_us_delay1 = 10 - ((17 * instruction_time) / 100)
     if (_ten_us_delay1 <= 10) then ; check if delay is not negative
       _usec_delay(_ten_us_delay1)
     end if
   else     
      n = n - 1;
      const _ten_us_delay2 = 10 - ((29 * instruction_time) / 100)
      if (_ten_us_delay2 <= 10) then ; check if delay is not negative
         _usec_delay(_ten_us_delay2)   
      else 
         _usec_delay(1)   
      end if
   
      const _ten_us_delay3 = 10 - ((6 * instruction_time) / 100)
      for n loop
         if (_ten_us_delay3 <= 10) then ; check if delay is not negative
            _usec_delay(_ten_us_delay3)
         else 
            _usec_delay(1)   
         end if
      end loop
   end if

end procedure

-- Delays for n * 1 msec
procedure delay_1ms(word in n) is
   const _one_ms_delay = 1000 - ((14 * instruction_time) / 100)
   for n loop
      if (_one_ms_delay <= 1000) then ; check if delay is not negative
         _usec_delay(_one_ms_delay)
      else 
         _usec_delay(1)   
      end if
   end loop
end procedure

-- Delays for n * 100 msec
procedure delay_100ms(word in n) is
   const _100_ms_delay = 100_000 - ((14 * instruction_time) / 100)
   for n loop
      _usec_delay(_100_ms_delay)
   end loop
end procedure

-- Delays for n * 1 sec
procedure delay_1s(word in n) is
   const _1_s_delay = 1000_000 - ((14 * instruction_time) / 100)
   for n loop
      _usec_delay(_1_s_delay)
   end loop
end procedure


