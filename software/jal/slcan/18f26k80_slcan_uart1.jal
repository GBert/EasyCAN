-- Title: CAN to UART adapter example
-- Author: William Welch Copyright (c) 2009, all rights reserved.
--   slightly modified by Gerhard Bertelsmann
--   adapted to PIC18F26K80
-- Sponsored by: Fiwihex www.fiwihex.com
-- Compiler: 2.4
-- Revision: $Revision: 2760 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: gateway between RS232 and CAN bus. Uses ASCII encapsulation, 
--          compatible with the Socket-CAN SLCAN API.
-- 
-- Sources: Socket-CAN, in particular the SLCAN API. http://developer.berlios.de/projects/socketcan/ 
--          also, the LAWICEL CAN-USB adapter.
--
-- For this example, the UART is only running at 460800.
--

include 18f26k80
pragma target clock 64_000_000
pragma target OSC  HS_HIGH
pragma target PLLEN P4                                           
pragma target WDT  disabled
pragma target DEBUG disabled
pragma target MCLR external
pragma target CANMUX pin_B2
include delay
include format
include print

const VERSION_HARDWARE = 0x31
          
const VERSION_FIRMWARE_MAJOR = 0x30
const VERSION_FIRMWARE_MINOR = 0x31

const byte VERSION_HARDWARE_STRING[] = "v1.0\r\n"
const byte VERSION_FIRMWARE_STRING[] = "0.1 \r\n"

enable_digital_io()

var bit led is pin_A0
pin_A0_direction =  output

const usart_hw_serial = true
const serial_hw_baudrate = 500_000
include serial_hardware
serial_hw_init()

-- ECAN controller is built-in to 18F26K80
-- but we will operate in 'legacy' mode 0.
pin_B2 = high -- set CANTX high for recessive level
pin_B2_direction = output
pin_B3_direction = input
include can_legacy
include can_ascii

can_reset()

-- % can-calc-bit-timing -c 64000000 mcp251x
--
-- Bit timing parameters for mcp251x with 64.000000 MHz ref clock
-- nominal                                 real Bitrt   nom  real SampP
-- Bitrate TQ[ns] PrS PhS1 PhS2 SJW BRP Bitrate Error SampP SampP Error CNF1 CNF2 CNF3
-- 1000000     62   5    6    4   1   4 1000000  0.0% 75.0% 75.0%  0.0% 0x03 0xac 0x03
--  800000     62   7    8    4   1   4  800000  0.0% 80.0% 80.0%  0.0% 0x03 0xbe 0x03
--  500000    125   6    7    2   1   8  500000  0.0% 87.5% 87.5%  0.0% 0x07 0xb5 0x01
--  250000    250   6    7    2   1  16  250000  0.0% 87.5% 87.5%  0.0% 0x0f 0xb5 0x01
--  125000    500   6    7    2   1  32  125000  0.0% 87.5% 87.5%  0.0% 0x1f 0xb5 0x01
--  100000    625   6    7    2   1  40  100000  0.0% 87.5% 87.5%  0.0% 0x27 0xb5 0x01
--   50000   1000   8    8    3   1  64   50000  0.0% 87.5% 85.0%  2.9% 0x3f 0xbf 0x02
--   20000 ***bitrate not possible***
--   10000 ***bitrate not possible***
--
--   where BRGCONx is CNFx
--

-- 250K bps sample point 87.5%
can_set_config(0x0f, 0xb5, 0x01)
CIOCON = 0x20; -- TXCAN, high when recessive

-- in this example we combine the hardware buffers.
RXB0CON = 0x04 -- rollover/ double-buffer
RXB1CON = 0x00 -- all valid frames go to buffer #1.

-- match all msgs
can_set_rxb0_mask(0,0,0,0)
can_set_rxb1_mask(0,0,0,0)

TXB0CON = 0;
TXB1CON = 0;
TXB2CON = 0;
CANCON = 0; -- normal mode

-- gateway loop

var byte s_rxcnt, s_rxbuf[32]
var byte s_txcnt, s_txbuf[32]
s_rxcnt = 0

forever loop
   var bit got_msg, txstat
   var byte i, data_len, c
   var byte can_data[8]
   var dword can_id
   
   got_msg = can_receive(1, can_id, can_data, data_len)
   
   if got_msg then
      s_txcnt = can_to_ascii(can_id, can_data, data_len, s_txbuf)
      for s_txcnt using i loop
         serial_hw_data = s_txbuf[i]
      end loop
      -- serial_hw2_data = 10
   end if
   
   if serial_hw_read(c) then
      s_rxbuf[s_rxcnt] = c
      s_rxcnt = s_rxcnt + 1
      if s_rxcnt >= 32 then
         s_rxcnt = 0
      end if
      if c == 13 then
         if s_rxbuf[0] == "V" then
            serial_hw_data = VERSION_HARDWARE
            serial_hw_data = 0x0d
            serial_hw_data = 0x0a
            s_rxcnt = 0
         end if
         if s_rxbuf[0] == "v" then
            serial_hw_data = VERSION_FIRMWARE_MAJOR
            serial_hw_data = VERSION_FIRMWARE_MINOR
            serial_hw_data = 0x0d
            serial_hw_data = 0x0a
            s_rxcnt = 0
         end if
 
         if ascii_to_can(s_rxbuf, can_id, can_data, data_len) then
            -- FIXME: should retry can_send if busy
            txstat = can_send(0, can_id, can_data, data_len)
         end if
         s_rxcnt = 0
      end if
   end if
   
   led = led ^ 1
end loop

